// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UserSalesListHandlerFunc turns a function with the right signature into a user sales list handler
type UserSalesListHandlerFunc func(UserSalesListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserSalesListHandlerFunc) Handle(params UserSalesListParams) middleware.Responder {
	return fn(params)
}

// UserSalesListHandler interface for that can handle valid user sales list params
type UserSalesListHandler interface {
	Handle(UserSalesListParams) middleware.Responder
}

// NewUserSalesList creates a new http.Handler for the user sales list operation
func NewUserSalesList(ctx *middleware.Context, handler UserSalesListHandler) *UserSalesList {
	return &UserSalesList{Context: ctx, Handler: handler}
}

/*UserSalesList swagger:route GET /user/sales user userSalesList

Список лотов пользователя

*/
type UserSalesList struct {
	Context *middleware.Context
	Handler UserSalesListHandler
}

func (o *UserSalesList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserSalesListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
