// Code generated by go-swagger; DO NOT EDIT.

package login

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "trade-shop/pkg/models"
)

// LoginFoundCode is the HTTP code returned for type LoginFound
const LoginFoundCode int = 302

/*LoginFound Редирект

swagger:response loginFound
*/
type LoginFound struct {
	/*

	 */
	Location string `json:"Location"`
}

// NewLoginFound creates LoginFound with default headers values
func NewLoginFound() *LoginFound {

	return &LoginFound{}
}

// WithLocation adds the location to the login found response
func (o *LoginFound) WithLocation(location string) *LoginFound {
	o.Location = location
	return o
}

// SetLocation sets the location to the login found response
func (o *LoginFound) SetLocation(location string) {
	o.Location = location
}

// WriteResponse to the client
func (o *LoginFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(302)
}

// LoginUnauthorizedCode is the HTTP code returned for type LoginUnauthorized
const LoginUnauthorizedCode int = 401

/*LoginUnauthorized Пользователь не аутентифицирован в системе

swagger:response loginUnauthorized
*/
type LoginUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResult `json:"body,omitempty"`
}

// NewLoginUnauthorized creates LoginUnauthorized with default headers values
func NewLoginUnauthorized() *LoginUnauthorized {

	return &LoginUnauthorized{}
}

// WithPayload adds the payload to the login unauthorized response
func (o *LoginUnauthorized) WithPayload(payload *models.ErrorResult) *LoginUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the login unauthorized response
func (o *LoginUnauthorized) SetPayload(payload *models.ErrorResult) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LoginUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
